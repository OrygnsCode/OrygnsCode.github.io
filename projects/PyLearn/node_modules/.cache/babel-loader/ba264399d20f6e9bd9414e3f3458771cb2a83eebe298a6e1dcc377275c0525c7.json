{"ast":null,"code":"import _objectSpread from\"/home/user/OrygnsCode.github.io/projects/PyLearn/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{createContext,useState,useContext,useEffect,useCallback}from'react';import{levels}from'../data/levels';import{jsx as _jsx}from\"react/jsx-runtime\";const PyLearnContext=/*#__PURE__*/createContext();const LOCAL_STORAGE_KEY='pylearnProgress';export const PyLearnProvider=_ref=>{let{children}=_ref;const[progress,setProgress]=useState(()=>{try{const storedProgress=localStorage.getItem(LOCAL_STORAGE_KEY);return storedProgress?JSON.parse(storedProgress):{};}catch(error){console.error(\"Failed to read from localStorage\",error);return{};}});const[streak,setStreak]=useState(0);const[currentLevelId,setCurrentLevelId]=useState(1);// Save progress to local storage whenever it changes\nuseEffect(()=>{try{localStorage.setItem(LOCAL_STORAGE_KEY,JSON.stringify(progress));}catch(error){console.error(\"Failed to write to localStorage\",error);// Optionally, set an error state or show a user-friendly message\n}},[progress]);// Calculate overall completion percentage\nconst totalLevels=levels.length;const completedLevels=Object.values(progress).filter(level=>level.completed).length;const completionPercentage=totalLevels>0?Math.round(completedLevels/totalLevels*100):0;const updateLevelProgress=useCallback((levelId,isCompleted)=>{setProgress(prevProgress=>{var _prevProgress$levelId;const newProgress=_objectSpread(_objectSpread({},prevProgress),{},{[levelId]:_objectSpread(_objectSpread({},prevProgress[levelId]),{},{completed:isCompleted,attempts:(((_prevProgress$levelId=prevProgress[levelId])===null||_prevProgress$levelId===void 0?void 0:_prevProgress$levelId.attempts)||0)+1})});// Update streak\nif(isCompleted){setStreak(prevStreak=>prevStreak+1);}else{setStreak(0);// Reset streak on incorrect answer\n}return newProgress;});},[]);const getLevelStatus=useCallback(levelId=>{var _progress$levelId;return((_progress$levelId=progress[levelId])===null||_progress$levelId===void 0?void 0:_progress$levelId.completed)||false;},[progress]);const resetAllProgress=useCallback(()=>{if(window.confirm(\"Are you sure you want to reset all your progress? This cannot be undone.\")){try{localStorage.removeItem(LOCAL_STORAGE_KEY);setProgress({});setStreak(0);setCurrentLevelId(1);console.log(\"All progress reset.\");}catch(error){console.error(\"Failed to clear localStorage\",error);}}},[]);const value={progress,updateLevelProgress,getLevelStatus,streak,completionPercentage,currentLevelId,setCurrentLevelId,// For future use, e.g., to advance automatically\nresetAllProgress};return/*#__PURE__*/_jsx(PyLearnContext.Provider,{value:value,children:children});};export const usePyLearn=()=>{const context=useContext(PyLearnContext);if(context===undefined){throw new Error('usePyLearn must be used within a PyLearnProvider');}return context;};","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useCallback","levels","jsx","_jsx","PyLearnContext","LOCAL_STORAGE_KEY","PyLearnProvider","_ref","children","progress","setProgress","storedProgress","localStorage","getItem","JSON","parse","error","console","streak","setStreak","currentLevelId","setCurrentLevelId","setItem","stringify","totalLevels","length","completedLevels","Object","values","filter","level","completed","completionPercentage","Math","round","updateLevelProgress","levelId","isCompleted","prevProgress","_prevProgress$levelId","newProgress","_objectSpread","attempts","prevStreak","getLevelStatus","_progress$levelId","resetAllProgress","window","confirm","removeItem","log","value","Provider","usePyLearn","context","undefined","Error"],"sources":["/home/user/OrygnsCode.github.io/projects/PyLearn/src/context/PyLearnContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect, useCallback } from 'react';\nimport { levels } from '../data/levels';\n\nconst PyLearnContext = createContext();\n\nconst LOCAL_STORAGE_KEY = 'pylearnProgress';\n\nexport const PyLearnProvider = ({ children }) => {\n  const [progress, setProgress] = useState(() => {\n    try {\n      const storedProgress = localStorage.getItem(LOCAL_STORAGE_KEY);\n      return storedProgress ? JSON.parse(storedProgress) : {};\n    } catch (error) {\n      console.error(\"Failed to read from localStorage\", error);\n      return {};\n    }\n  });\n  const [streak, setStreak] = useState(0);\n  const [currentLevelId, setCurrentLevelId] = useState(1);\n\n  // Save progress to local storage whenever it changes\n  useEffect(() => {\n    try {\n      localStorage.setItem(LOCAL_STORAGE_KEY, JSON.stringify(progress));\n    } catch (error) {\n      console.error(\"Failed to write to localStorage\", error);\n      // Optionally, set an error state or show a user-friendly message\n    }\n  }, [progress]);\n\n  // Calculate overall completion percentage\n  const totalLevels = levels.length;\n  const completedLevels = Object.values(progress).filter(level => level.completed).length;\n  const completionPercentage = totalLevels > 0 ? Math.round((completedLevels / totalLevels) * 100) : 0;\n\n  const updateLevelProgress = useCallback((levelId, isCompleted) => {\n    setProgress(prevProgress => {\n      const newProgress = {\n        ...prevProgress,\n        [levelId]: { ...prevProgress[levelId], completed: isCompleted, attempts: (prevProgress[levelId]?.attempts || 0) + 1 }\n      };\n\n      // Update streak\n      if (isCompleted) {\n        setStreak(prevStreak => prevStreak + 1);\n      } else {\n        setStreak(0); // Reset streak on incorrect answer\n      }\n      return newProgress;\n    });\n  }, []);\n\n  const getLevelStatus = useCallback((levelId) => {\n    return progress[levelId]?.completed || false;\n  }, [progress]);\n\n  const resetAllProgress = useCallback(() => {\n    if (window.confirm(\"Are you sure you want to reset all your progress? This cannot be undone.\")) {\n      try {\n        localStorage.removeItem(LOCAL_STORAGE_KEY);\n        setProgress({});\n        setStreak(0);\n        setCurrentLevelId(1);\n        console.log(\"All progress reset.\");\n      } catch (error) {\n        console.error(\"Failed to clear localStorage\", error);\n      }\n    }\n  }, []);\n\n  const value = {\n    progress,\n    updateLevelProgress,\n    getLevelStatus,\n    streak,\n    completionPercentage,\n    currentLevelId,\n    setCurrentLevelId, // For future use, e.g., to advance automatically\n    resetAllProgress,\n  };\n\n  return (\n    <PyLearnContext.Provider value={value}>\n      {children}\n    </PyLearnContext.Provider>\n  );\n};\n\nexport const usePyLearn = () => {\n  const context = useContext(PyLearnContext);\n  if (context === undefined) {\n    throw new Error('usePyLearn must be used within a PyLearnProvider');\n  }\n  return context;\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}