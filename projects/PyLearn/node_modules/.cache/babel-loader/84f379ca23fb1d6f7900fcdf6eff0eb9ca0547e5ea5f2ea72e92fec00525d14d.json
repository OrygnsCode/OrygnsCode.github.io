{"ast":null,"code":"export const levels=[{id:1,title:\"Level 1: Hello, PyLearn!\",task:\"Your first task is simple: print the classic greeting \\\"Hello, PyLearn!\\\" to the console.\",initialCode:\"print(\\\"Hello, PyLearn!\\\")\",expectedOutput:\"Hello, PyLearn!\\n\",hints:[\"Remember the basic Python function for displaying text.\",\"The function you're looking for is `print()`.\",\"Make sure your text is inside quotes: `print(\\\"Your text here\\\")`.\"]},{id:2,title:\"Level 2: Variables Ahoy!\",task:\"Create a variable named `name` and assign your name (or any name) to it as a string. Then, print a greeting using this variable, like `Hello, [Your Name]!`.\",initialCode:\"name = \\\"PyLearner\\\"\\nprint(f\\\"Hello, {name}!\\\")\",expectedOutput:\"Hello, PyLearner!\\n\",// This will need to be dynamically validated later\nhints:[\"Variables store data. You assign a value using the `=` operator.\",\"Strings are enclosed in single or double quotes.\",\"Use an f-string for easy variable interpolation: `print(f\\\"Hello, {variable}!\\\")`.\"]},{id:3,title:\"Level 3: Basic Arithmetic\",task:\"Perform a simple addition. Print the sum of 5 and 3.\",initialCode:\"\",expectedOutput:\"8\\n\",hints:[\"You can use the `+` operator for addition.\",\"`print()` can directly output the result of an arithmetic operation.\"]},{id:4,title:\"Level 4: User Input\",task:\"Ask the user for their favorite color using `input()` and then print a message confirming their choice, like: `Your favorite color is [color].`\",initialCode:\"\",expectedOutput:\"Your favorite color is blue.\\n\",// Dynamic input will make this tricky client-side\nhints:[\"The `input()` function reads a line from input, converts it to a string, and returns that.\",\"Remember to store the input in a variable.\",\"Combine strings using `+` or f-strings for the final output.\"]},{id:5,title:\"Level 5: If-Else Statements\",task:\"Write a program that checks if a number is positive. If the variable `num` (set to 10) is greater than 0, print \\\"Positive\\\". Otherwise, print \\\"Not positive\\\".\",initialCode:\"num = 10\\n\",expectedOutput:\"Positive\\n\",hints:[\"Use `if` and `else` keywords.\",\"Conditions are followed by a colon `:` and indented blocks.\",\"Comparison operators like `>` are used to check conditions.\"]},{id:6,title:\"Level 6: For Loops\",task:\"Use a `for` loop to print numbers from 0 to 4 (inclusive).\",initialCode:\"\",expectedOutput:\"0\\n1\\n2\\n3\\n4\\n\",hints:[\"The `range()` function is useful for generating sequences of numbers.\",\"A `for` loop iterates over items of a sequence.\",\"Remember the `for item in sequence:` syntax.\"]},{id:7,title:\"Level 7: While Loops\",task:\"Use a `while` loop to print numbers from 1 to 3 (inclusive).\",initialCode:\"\",expectedOutput:\"1\\n2\\n3\\n\",hints:[\"A `while` loop continues as long as its condition is true.\",\"Don't forget to increment your loop variable inside the loop to avoid an infinite loop.\"]},{id:8,title:\"Level 8: Lists\",task:\"Create a list called `fruits` with three items: \\\"apple\\\", \\\"banana\\\", and \\\"cherry\\\". Then, print the entire list.\",initialCode:\"\",expectedOutput:\"['apple', 'banana', 'cherry']\\n\",hints:[\"Lists are defined using square brackets `[]`.\",\"Items in a list are separated by commas.\"]},{id:9,title:\"Level 9: List Access\",task:\"Given the list `colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\"]`, print the second item in the list.\",initialCode:\"colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\"]\\n\",expectedOutput:\"green\\n\",hints:[\"List items are accessed by their index, starting from 0.\",\"The syntax for accessing an item is `list_name[index]`.\"]},{id:10,title:\"Level 10: Dictionaries\",task:\"Create a dictionary called `person` with keys \\\"name\\\" (value: \\\"Alice\\\") and \\\"age\\\" (value: 30). Then, print the dictionary.\",initialCode:\"\",expectedOutput:\"{'name': 'Alice', 'age': 30}\\n\",hints:[\"Dictionaries are defined using curly braces `{}`.\",\"They store key-value pairs, separated by colons `:`.\"]},{id:11,title:\"Level 11: Dictionary Access\",task:\"Given the dictionary `car = {\\\"brand\\\": \\\"Ford\\\", \\\"model\\\": \\\"Mustang\\\"}`, print the value associated with the key \\\"model\\\".\",initialCode:\"car = {\\\"brand\\\": \\\"Ford\\\", \\\"model\\\": \\\"Mustang\\\"}\\n\",expectedOutput:\"Mustang\\n\",hints:[\"Dictionary values are accessed using their keys in square brackets: `dictionary_name[key]`.\"]},{id:12,title:\"Level 12: Functions\",task:\"Define a function called `greet` that takes one argument, `name`, and prints `Hello, [name]!` Call this function with your name.\",initialCode:\"\",expectedOutput:\"Hello, PyLearner!\\n\",// Needs dynamic validation\nhints:[\"Define a function using the `def` keyword.\",\"Functions can take arguments in parentheses.\",\"Call a function by its name followed by parentheses containing arguments.\"]},{id:13,title:\"Level 13: Function Return Values\",task:\"Define a function `add_numbers` that takes two arguments, `a` and `b`, and returns their sum. Print the result of calling `add_numbers` with 7 and 3.\",initialCode:\"\",expectedOutput:\"10\\n\",hints:[\"Use the `return` keyword to send a value back from a function.\",\"The returned value can be stored in a variable or directly printed.\"]},{id:14,title:\"Level 14: Comments\",task:\"Add a single-line comment that says \\\"This is my first Python program\\\" to your code. Then, print \\\"Comments are fun!\\\".\",initialCode:\"\",expectedOutput:\"Comments are fun!\\n\",hints:[\"Single-line comments start with a `#` symbol.\",\"Comments are ignored by the Python interpreter.\"]},{id:15,title:\"Level 15: Modules (Conceptual)\",task:\"This level is conceptual. In a real Python environment, you'd `import` modules to use their functions. For example, to use math functions, you'd `import math`. Print a message: \\\"Modules expand possibilities!\\\"\",initialCode:\"\",expectedOutput:\"Modules expand possibilities!\\n\",hints:[\"The `import` statement brings in external code.\",\"Think about how you'd use `math.sqrt()` after `import math`.\"]}];","map":{"version":3,"names":["levels","id","title","task","initialCode","expectedOutput","hints"],"sources":["/home/user/OrygnsCode.github.io/projects/PyLearn/src/data/levels.js"],"sourcesContent":["export const levels = [\n  {\n    id: 1,\n    title: \"Level 1: Hello, PyLearn!\",\n    task: \"Your first task is simple: print the classic greeting \\\"Hello, PyLearn!\\\" to the console.\",\n    initialCode: \"print(\\\"Hello, PyLearn!\\\")\",\n    expectedOutput: \"Hello, PyLearn!\\n\",\n    hints: [\n      \"Remember the basic Python function for displaying text.\",\n      \"The function you're looking for is `print()`.\",\n      \"Make sure your text is inside quotes: `print(\\\"Your text here\\\")`.\",\n    ],\n  },\n  {\n    id: 2,\n    title: \"Level 2: Variables Ahoy!\",\n    task: \"Create a variable named `name` and assign your name (or any name) to it as a string. Then, print a greeting using this variable, like `Hello, [Your Name]!`.\",\n    initialCode: \"name = \\\"PyLearner\\\"\\nprint(f\\\"Hello, {name}!\\\")\",\n    expectedOutput: \"Hello, PyLearner!\\n\", // This will need to be dynamically validated later\n    hints: [\n      \"Variables store data. You assign a value using the `=` operator.\",\n      \"Strings are enclosed in single or double quotes.\",\n      \"Use an f-string for easy variable interpolation: `print(f\\\"Hello, {variable}!\\\")`.\",\n    ],\n  },\n  {\n    id: 3,\n    title: \"Level 3: Basic Arithmetic\",\n    task: \"Perform a simple addition. Print the sum of 5 and 3.\",\n    initialCode: \"\",\n    expectedOutput: \"8\\n\",\n    hints: [\n      \"You can use the `+` operator for addition.\",\n      \"`print()` can directly output the result of an arithmetic operation.\",\n    ],\n  },\n  {\n    id: 4,\n    title: \"Level 4: User Input\",\n    task: \"Ask the user for their favorite color using `input()` and then print a message confirming their choice, like: `Your favorite color is [color].`\",\n    initialCode: \"\",\n    expectedOutput: \"Your favorite color is blue.\\n\", // Dynamic input will make this tricky client-side\n    hints: [\n      \"The `input()` function reads a line from input, converts it to a string, and returns that.\",\n      \"Remember to store the input in a variable.\",\n      \"Combine strings using `+` or f-strings for the final output.\",\n    ],\n  },\n  {\n    id: 5,\n    title: \"Level 5: If-Else Statements\",\n    task: \"Write a program that checks if a number is positive. If the variable `num` (set to 10) is greater than 0, print \\\"Positive\\\". Otherwise, print \\\"Not positive\\\".\",\n    initialCode: \"num = 10\\n\",\n    expectedOutput: \"Positive\\n\",\n    hints: [\n      \"Use `if` and `else` keywords.\",\n      \"Conditions are followed by a colon `:` and indented blocks.\",\n      \"Comparison operators like `>` are used to check conditions.\",\n    ],\n  },\n  {\n    id: 6,\n    title: \"Level 6: For Loops\",\n    task: \"Use a `for` loop to print numbers from 0 to 4 (inclusive).\",\n    initialCode: \"\",\n    expectedOutput: \"0\\n1\\n2\\n3\\n4\\n\",\n    hints: [\n      \"The `range()` function is useful for generating sequences of numbers.\",\n      \"A `for` loop iterates over items of a sequence.\",\n      \"Remember the `for item in sequence:` syntax.\",\n    ],\n  },\n  {\n    id: 7,\n    title: \"Level 7: While Loops\",\n    task: \"Use a `while` loop to print numbers from 1 to 3 (inclusive).\",\n    initialCode: \"\",\n    expectedOutput: \"1\\n2\\n3\\n\",\n    hints: [\n      \"A `while` loop continues as long as its condition is true.\",\n      \"Don't forget to increment your loop variable inside the loop to avoid an infinite loop.\",\n    ],\n  },\n  {\n    id: 8,\n    title: \"Level 8: Lists\",\n    task: \"Create a list called `fruits` with three items: \\\"apple\\\", \\\"banana\\\", and \\\"cherry\\\". Then, print the entire list.\",\n    initialCode: \"\",\n    expectedOutput: \"['apple', 'banana', 'cherry']\\n\",\n    hints: [\n      \"Lists are defined using square brackets `[]`.\",\n      \"Items in a list are separated by commas.\",\n    ],\n  },\n  {\n    id: 9,\n    title: \"Level 9: List Access\",\n    task: \"Given the list `colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\"]`, print the second item in the list.\",\n    initialCode: \"colors = [\\\"red\\\", \\\"green\\\", \\\"blue\\\"]\\n\",\n    expectedOutput: \"green\\n\",\n    hints: [\n      \"List items are accessed by their index, starting from 0.\",\n      \"The syntax for accessing an item is `list_name[index]`.\",\n    ],\n  },\n  {\n    id: 10,\n    title: \"Level 10: Dictionaries\",\n    task: \"Create a dictionary called `person` with keys \\\"name\\\" (value: \\\"Alice\\\") and \\\"age\\\" (value: 30). Then, print the dictionary.\",\n    initialCode: \"\",\n    expectedOutput: \"{'name': 'Alice', 'age': 30}\\n\",\n    hints: [\n      \"Dictionaries are defined using curly braces `{}`.\",\n      \"They store key-value pairs, separated by colons `:`.\",\n    ],\n  },\n  {\n    id: 11,\n    title: \"Level 11: Dictionary Access\",\n    task: \"Given the dictionary `car = {\\\"brand\\\": \\\"Ford\\\", \\\"model\\\": \\\"Mustang\\\"}`, print the value associated with the key \\\"model\\\".\",\n    initialCode: \"car = {\\\"brand\\\": \\\"Ford\\\", \\\"model\\\": \\\"Mustang\\\"}\\n\",\n    expectedOutput: \"Mustang\\n\",\n    hints: [\n      \"Dictionary values are accessed using their keys in square brackets: `dictionary_name[key]`.\",\n    ],\n  },\n  {\n    id: 12,\n    title: \"Level 12: Functions\",\n    task: \"Define a function called `greet` that takes one argument, `name`, and prints `Hello, [name]!` Call this function with your name.\",\n    initialCode: \"\",\n    expectedOutput: \"Hello, PyLearner!\\n\", // Needs dynamic validation\n    hints: [\n      \"Define a function using the `def` keyword.\",\n      \"Functions can take arguments in parentheses.\",\n      \"Call a function by its name followed by parentheses containing arguments.\",\n    ],\n  },\n  {\n    id: 13,\n    title: \"Level 13: Function Return Values\",\n    task: \"Define a function `add_numbers` that takes two arguments, `a` and `b`, and returns their sum. Print the result of calling `add_numbers` with 7 and 3.\",\n    initialCode: \"\",\n    expectedOutput: \"10\\n\",\n    hints: [\n      \"Use the `return` keyword to send a value back from a function.\",\n      \"The returned value can be stored in a variable or directly printed.\",\n    ],\n  },\n  {\n    id: 14,\n    title: \"Level 14: Comments\",\n    task: \"Add a single-line comment that says \\\"This is my first Python program\\\" to your code. Then, print \\\"Comments are fun!\\\".\",\n    initialCode: \"\",\n    expectedOutput: \"Comments are fun!\\n\",\n    hints: [\n      \"Single-line comments start with a `#` symbol.\",\n      \"Comments are ignored by the Python interpreter.\",\n    ],\n  },\n  {\n    id: 15,\n    title: \"Level 15: Modules (Conceptual)\",\n    task: \"This level is conceptual. In a real Python environment, you'd `import` modules to use their functions. For example, to use math functions, you'd `import math`. Print a message: \\\"Modules expand possibilities!\\\"\",\n    initialCode: \"\",\n    expectedOutput: \"Modules expand possibilities!\\n\",\n    hints: [\n      \"The `import` statement brings in external code.\",\n      \"Think about how you'd use `math.sqrt()` after `import math`.\",\n    ],\n  },\n];"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}