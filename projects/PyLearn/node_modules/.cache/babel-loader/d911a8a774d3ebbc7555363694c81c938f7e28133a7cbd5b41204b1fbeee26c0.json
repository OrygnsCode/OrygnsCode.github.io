{"ast":null,"code":"import DiffMatchPatch from'diff-match-patch';const dmp=new DiffMatchPatch();/**\n * Simulates code execution and provides feedback based on expected output.\n * In a real application, the `submittedCode` would be sent to a backend\n * for secure Python execution, and the actual output would be returned.\n *\n * @param {string} submittedCode The code submitted by the user.\n * @param {string} expectedOutput The expected output for the level.\n * @returns {{isCorrect: boolean, feedback: string, actualOutput: string}}\n */export const validateCode=(submittedCode,expectedOutput)=>{// For client-side simulation, we're treating submittedCode as its own output.\n// In a real scenario, 'actualOutput' would come from a backend.\nconst actualOutput=submittedCode.trim();const cleanExpectedOutput=expectedOutput.trim();const isCorrect=actualOutput.includes(cleanExpectedOutput);let feedback='';if(isCorrect){feedback=\"üéâ Correct! Great job!\";}else{const diff=dmp.diff_main(cleanExpectedOutput,actualOutput);dmp.diff_cleanupSemantic(diff);const diffHtml=dmp.diff_prettyHtml(diff);feedback=\"\\u274C Incorrect. Here's a comparison:\\n\\n<div class=\\\"diff-viewer\\\">\".concat(diffHtml,\"</div>\\n\\nReview your code and try again!\");}return{isCorrect,feedback,actualOutput};};","map":{"version":3,"names":["DiffMatchPatch","dmp","validateCode","submittedCode","expectedOutput","actualOutput","trim","cleanExpectedOutput","isCorrect","includes","feedback","diff","diff_main","diff_cleanupSemantic","diffHtml","diff_prettyHtml","concat"],"sources":["/home/user/OrygnsCode.github.io/projects/PyLearn/src/utils/codeValidation.js"],"sourcesContent":["import DiffMatchPatch from 'diff-match-patch';\n\nconst dmp = new DiffMatchPatch();\n\n/**\n * Simulates code execution and provides feedback based on expected output.\n * In a real application, the `submittedCode` would be sent to a backend\n * for secure Python execution, and the actual output would be returned.\n *\n * @param {string} submittedCode The code submitted by the user.\n * @param {string} expectedOutput The expected output for the level.\n * @returns {{isCorrect: boolean, feedback: string, actualOutput: string}}\n */\nexport const validateCode = (submittedCode, expectedOutput) => {\n  // For client-side simulation, we're treating submittedCode as its own output.\n  // In a real scenario, 'actualOutput' would come from a backend.\n  const actualOutput = submittedCode.trim(); \n  const cleanExpectedOutput = expectedOutput.trim();\n\n  const isCorrect = actualOutput.includes(cleanExpectedOutput);\n\n  let feedback = '';\n  if (isCorrect) {\n    feedback = \"üéâ Correct! Great job!\";\n  } else {\n    const diff = dmp.diff_main(cleanExpectedOutput, actualOutput);\n    dmp.diff_cleanupSemantic(diff);\n    const diffHtml = dmp.diff_prettyHtml(diff);\n\n    feedback = `‚ùå Incorrect. Here's a comparison:\n\n<div class=\"diff-viewer\">${diffHtml}</div>\n\nReview your code and try again!`;\n  }\n\n  return { isCorrect, feedback, actualOutput };\n};\n"],"mappings":"AAAA,MAAO,CAAAA,cAAc,KAAM,kBAAkB,CAE7C,KAAM,CAAAC,GAAG,CAAG,GAAI,CAAAD,cAAc,CAAC,CAAC,CAEhC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GACA,MAAO,MAAM,CAAAE,YAAY,CAAGA,CAACC,aAAa,CAAEC,cAAc,GAAK,CAC7D;AACA;AACA,KAAM,CAAAC,YAAY,CAAGF,aAAa,CAACG,IAAI,CAAC,CAAC,CACzC,KAAM,CAAAC,mBAAmB,CAAGH,cAAc,CAACE,IAAI,CAAC,CAAC,CAEjD,KAAM,CAAAE,SAAS,CAAGH,YAAY,CAACI,QAAQ,CAACF,mBAAmB,CAAC,CAE5D,GAAI,CAAAG,QAAQ,CAAG,EAAE,CACjB,GAAIF,SAAS,CAAE,CACbE,QAAQ,CAAG,wBAAwB,CACrC,CAAC,IAAM,CACL,KAAM,CAAAC,IAAI,CAAGV,GAAG,CAACW,SAAS,CAACL,mBAAmB,CAAEF,YAAY,CAAC,CAC7DJ,GAAG,CAACY,oBAAoB,CAACF,IAAI,CAAC,CAC9B,KAAM,CAAAG,QAAQ,CAAGb,GAAG,CAACc,eAAe,CAACJ,IAAI,CAAC,CAE1CD,QAAQ,yEAAAM,MAAA,CAEeF,QAAQ,6CAEH,CAC9B,CAEA,MAAO,CAAEN,SAAS,CAAEE,QAAQ,CAAEL,YAAa,CAAC,CAC9C,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}